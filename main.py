#!/usr/bin/env python3
"""
Python Authenticator - App similar ao Google Authenticator
Autor: Claude AI
Data: 2025

Aplicativo para gerar tokens TOTP (Time-based One-Time Password)
compat√≠vel com servi√ßos que usam autentica√ß√£o de dois fatores.
"""

import sys
import os
from tkinter import messagebox

def check_dependencies():
    """Verifica se todas as depend√™ncias est√£o instaladas"""
    required_modules = ['pyotp', 'cryptography', 'PIL']
    missing_modules = []
    
    for module in required_modules:
        try:
            __import__(module)
        except ImportError:
            missing_modules.append(module)
    
    if missing_modules:
        error_msg = f"""
M√≥dulos necess√°rios n√£o encontrados: {', '.join(missing_modules)}

Para instalar, execute:
pip install -r requirements.txt

Ou instale individualmente:
pip install pyotp cryptography Pillow
        """
        messagebox.showerror("Depend√™ncias Faltando", error_msg)
        return False
    
    return True

def main():
    """Fun√ß√£o principal do aplicativo"""
    try:
        # Debug: mostrar informa√ß√µes do ambiente
        print("üîê Iniciando Python Authenticator...")
        print("üì± Aplicativo similar ao Google Authenticator")
        print("‚ú® Suporte para TOTP (Time-based One-Time Password)")
        print("-" * 50)
        
        # Informa√ß√µes de debug
        print(f"Python execut√°vel: {sys.executable}")
        print(f"Diret√≥rio atual: {os.getcwd()}")
        print(f"Execut√°vel congelado: {getattr(sys, 'frozen', False)}")
        
        if getattr(sys, 'frozen', False):
            print(f"Diret√≥rio tempor√°rio: {sys._MEIPASS}")
            print(f"Execut√°vel: {sys.executable}")
        
        # Verifica depend√™ncias
        if not check_dependencies():
            sys.exit(1)
        
        # Importa e executa o app principal
        from authenticator_app import AuthenticatorApp
        
        # Criar inst√¢ncia do app
        app = AuthenticatorApp()
        
        # Debug: mostrar informa√ß√µes do banco
        db_info = app.database.get_database_info()
        print("\nüìÅ Informa√ß√µes do banco de dados:")
        for key, value in db_info.items():
            print(f"  {key}: {value}")
        print("-" * 50)
        
        # Executar aplicativo
        app.run()
        
    except KeyboardInterrupt:
        print("\nüëã Aplicativo encerrado pelo usu√°rio")
        sys.exit(0)
    except Exception as e:
        error_msg = f"Erro fatal: {str(e)}"
        print(f"‚ùå {error_msg}")
        
        # Tentar mostrar messagebox se poss√≠vel
        try:
            messagebox.showerror("Erro Fatal", error_msg)
        except:
            pass
            
        sys.exit(1)

if __name__ == "__main__":
    # N√ÉO mudar diret√≥rio de trabalho quando execut√°vel
    # Deixar que cada m√≥dulo determine onde salvar seus arquivos
    main()